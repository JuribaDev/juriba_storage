#!/bin/bash -e

# Enable jemalloc for reduced memory usage and latency.
if [ -z "${LD_PRELOAD+x}" ]; then
    LD_PRELOAD=$(find /usr/lib -name libjemalloc.so.2 -print -quit)
    export LD_PRELOAD
fi

# Wait for PostgreSQL to be available
if [ -n "$DATABASE_URL" ]; then
  echo "Waiting for PostgreSQL to be available..."

  # Use psql to check for readiness - it's more robust than pg_isready sometimes
  # No need to parse HOST/USER if DATABASE_URL is set
  echo "Attempting connection to $DATABASE_URL"

  RETRIES=20 # You might still want to increase this if needed
  # Use psql with the full DATABASE_URL for the check
  until psql "$DATABASE_URL" -c "\q" > /dev/null 2>&1 || [ $RETRIES -eq 0 ]; do
    echo "Waiting for PostgreSQL server, $((RETRIES--)) remaining attempts..."
    sleep 3 # Maybe increase sleep slightly too
  done

  if [ $RETRIES -eq 0 ]; then
    echo "PostgreSQL server not available, exiting"
    exit 1
  fi

  echo "PostgreSQL is available"
fi

# Wait for Redis to be available
if [ -n "$REDIS_URL" ]; then
  echo "Waiting for Redis to be available..."

  # Keep your existing parsing for host/port
  REDIS_HOST=$(echo $REDIS_URL | awk -F[/:] '{print $4}')
  REDIS_PORT=$(echo $REDIS_URL | awk -F[/:] '{print $5}')

  echo "Checking for Redis at $REDIS_HOST:$REDIS_PORT"

  RETRIES=20
  # Use bash /dev/tcp check instead of nc
  until (echo > /dev/tcp/$REDIS_HOST/$REDIS_PORT) > /dev/null 2>&1 || [ $RETRIES -eq 0 ]; do
    echo "Waiting for Redis server, $((RETRIES--)) remaining attempts..."
    sleep 2
  done

  # The rest of your logic remains the same
  if [ $RETRIES -eq 0 ]; then
    echo "Redis server not available, continuing anyway..." # Or exit 1 if Redis is critical
  else
    echo "Redis is available"
  fi
fi

# If running the rails server then create or migrate existing database
if [ "${@: -2:1}" == "./bin/rails" ] && [ "${@: -1:1}" == "server" ]; then
  ./bin/rails db:prepare
fi

exec "${@}"
